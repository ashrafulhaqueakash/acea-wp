<?php

/**

 * Generated by the WordPress Meta Box Generator

 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/

 *

 * Retrieving the values:

 * Client Name = get_post_meta( get_the_ID(), 'client_name', true )

 * Duration = get_post_meta( get_the_ID(), 'duration', true )

 * Portfolio Grid = get_post_meta( get_the_ID(), 'column_grid', true )

 * Image Height = get_post_meta( get_the_ID(), 'acea_image_height', true )
 *
 */

class Portfolio_Single_Meta {

	private $config = '{"title":"Portfolio Advance Meta","prefix":"solar_","domain":"solar-hp","class_name":"Portfolio_Single_Meta","context":"normal","priority":"default","cpt":"portfolio","fields":[{"type":"text","label":"Client Name","default":"Maveland Inc.","id":"client_name"},{"type":"text","label":"Duration","default":"2 weeks","id":"duration"},{"type":"select","label":"Portfolio Grid","default":"3","options":"4 : 4 column\r\n3 : 3 column\r\n6 : 6 column\r\n8 : 8 column\r\n12 : Fullwidth","id":"column_grid"},{"type":"select","label":"Image Height","default":"normal","options":"normal : Normal\r\nbig : Big\r\n","id":"acea_image_height"}]}';



	public function __construct() {

		$this->config = json_decode( $this->config, true );

		$this->process_cpts();

		add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );

		add_action( 'save_post', [ $this, 'save_post' ] );

		add_action( 'save_post_2', [ $this, 'save_post_2' ] );

	}



	public function process_cpts() {

		if ( !empty( $this->config['cpt'] ) ) {

			if ( empty( $this->config['post-type'] ) ) {

				$this->config['post-type'] = [];

			}

			$parts = explode( ',', $this->config['cpt'] );

			$parts = array_map( 'trim', $parts );

			$this->config['post-type'] = array_merge( $this->config['post-type'], $parts );

		}

	}



	public function add_meta_boxes() {

		foreach ( $this->config['post-type'] as $screen ) {

			add_meta_box(

				sanitize_title( $this->config['title'] ),

				$this->config['title'],

				[ $this, 'add_meta_box_callback' ],

				$screen,

				$this->config['context'],

				$this->config['priority']

			);

		}

	}



	public function save_post( $post_id ) {

		foreach ( $this->config['fields'] as $field ) {

			switch ( $field['type'] ) {

				case 'url':

					if ( isset( $_POST[ $field['id'] ] ) ) {

						$sanitized = esc_url_raw( $_POST[ $field['id'] ] );

						update_post_meta( $post_id, $field['id'], $sanitized );

					}

					break;

				default:

					if ( isset( $_POST[ $field['id'] ] ) ) {

						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );

						update_post_meta( $post_id, $field['id'], $sanitized );

					}

			}

		}

	}



	public function add_meta_box_callback() {

		$this->fields_table();

	}



	private function fields_table() {

		?><table class="form-table" role="presentation">

			<tbody><?php

				foreach ( $this->config['fields'] as $field ) {

					?><tr>

						<th scope="row"><?php $this->label( $field ); ?></th>

						<td><?php $this->field( $field ); ?></td>

					</tr><?php

				}

			?></tbody>

		</table><?php

	}



	private function label( $field ) {

		switch ( $field['type'] ) {

			default:

				printf(

					'<label class="" for="%s">%s</label>',

					$field['id'], $field['label']

				);

		}

	}



	private function field( $field ) {

		switch ( $field['type'] ) {

			case 'date':

				$this->input_minmax( $field );

				break;

			case 'select':

				$this->select( $field );

				break;

			default:

				$this->input( $field );

		}

	}



	private function input( $field ) {

		printf(

			'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',

			isset( $field['class'] ) ? $field['class'] : '',

			$field['id'], $field['id'],

			isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',

			$field['type'],

			$this->value( $field )

		);

	}



	private function input_minmax( $field ) {

		printf(

			'<input class="regular-text" id="%s" %s %s name="%s" %s type="%s" value="%s">',

			$field['id'],

			isset( $field['max'] ) ? "max='{$field['max']}'" : '',

			isset( $field['min'] ) ? "min='{$field['min']}'" : '',

			$field['id'],

			isset( $field['step'] ) ? "step='{$field['step']}'" : '',

			$field['type'],

			$this->value( $field )

		);

	}



	private function select( $field ) {

		printf(

			'<select id="%s" name="%s">%s</select>',

			$field['id'], $field['id'],

			$this->select_options( $field )

		);

	}



	private function select_selected( $field, $current ) {

		$value = $this->value( $field );

		if ( $value === $current ) {

			return 'selected';

		}

		return '';

	}



	private function select_options( $field ) {


		$output = [];

		$options = explode( "\r\n", $field['options'] );

		$i = 0;

		foreach ( $options as $option ) {

			$pair = explode( ':', $option );

			$pair = array_map( 'trim', $pair );

            $pair0 = isset($pair[0]) ? $pair[0] : '';

            $pair1 = isset($pair[1]) ? $pair[1] : '';

			$output[] = sprintf(

				'<option %s value="%s"> %s</option>',

				$this->select_selected( $field, $pair[0] ),

				$pair0, $pair1

			);

			$i++;

		}

		return implode( '<br>', $output );

	}

	public function save_post_2( $post_id ) {
		foreach ( $this->config['fields'] as $field ) {
			switch ( $field['type'] ) {
				case 'url':
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = esc_url_raw( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
					break;
				default:
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
			}
		}
	}



	private function value( $field ) {

		global $post;

		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {

			$value = get_post_meta( $post->ID, $field['id'], true );

		} else if ( isset( $field['default'] ) ) {

			$value = $field['default'];

		} else {

			return '';

		}

		return str_replace( '\u0027', "'", $value );

	}



}

new Portfolio_Single_Meta;


